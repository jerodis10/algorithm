BJ_1800 -> 0
BJ_3109 -> 0
BJ_11967 -> 0
BJ_14466 -> X
BJ_15591 -> X
BJ_16639 -> X
BJ_16918 -> 0
BJ_16967 -> X
BJ_17182 -> O
BJ_18500 -> X
BJ_1476 -> X
BJ_2309 -> O
BJ_9095 -> X
BJ_10819
BJ_10972
BJ_10973
BJ_2231 -> 0 
BJ_2798 -> 0
BJ_7568 -> 0 

--------------------
BruteForce
--------------------
BJ_1018 -> 0 * * *
BJ_1436 -> 0 * * * *

--------------------
NUM
--------------------
BJ_5086 -> 0 * * -
BJ_1037 -> X * * * *    모든 약수로 원래 수 -> 최소 약수 * 최대 약수
BJ_2609 -> 0 * * * *    최대공약수 구하는 법, 최소공배수 = 두 수의 곱 / 최대공약수
BJ_1934 -> X * * -
BJ_2981 -> X * * * *    A1 - A2 = M * (a1 - a2) + (r1 - r2)    r1 - r2 = 0
BJ_3036 -> 0 * * * *    기약분수로 만들기 위한 최대공약수
BJ_11050 -> 0 * * * *   파스칼의 법칙 (n+1, r+1) = (n, r) + (n, r+1)   =>   (n, r) = (n-1, r-1) + (n-1, r)  /   (n 0) = (n n) = 1
BJ_11051 -> 0 * * ?     페르마의 소정리
BJ_1010 -> 0 * * * *
BJ_9375 -> 0 * * -
BJ_1676 -> X * * * *
BJ_2004 -> X * * * *    이항계수 활용

--------------------
BackTracking
--------------------
BJ_9663 -> X -> * * * *
BJ_2580 -> 0 -> X * * * *
BJ_14888 -> 0 -> * * -
BJ_14889 -> 0 -> X * * *

--------------------
DP_v1
--------------------
BJ_1904 -> X * * * * -
BJ_9461 -> 0 * * * * -
BJ_1912 -> 0 * * * * -
BJ_1149 -> 0 * * * * -
BJ_1932 -> 0 * * * * -
BJ_2579 -> 0 * * * * -
BJ_1463 -> 0 * * * * *
BJ_10844 -> 0 * * * * -
BJ_2156 -> 0 * * * * -
BJ_11053 -> 0 * * * * -
BJ_11054 -> 0 * * * * -
BJ_2565 -> X * * * * *
BJ_9251 -> 0 * * * * -
BJ_12865 -> 0 * * * * *

11726 * * -
11727 * * -
1010 * * -
14501 * * *
11051 * -
2133 * * -
2294 * * *
2225 * * *
1005 * * -   -> 위상정렬
2096 * * -
17070 * * -
1937 * * *       -> map - dp(map)
1915 * * *
12852 * * *
2011 * *
2098 * *    -> TSP (외판원 순회),    비트마스크(https://loosie.tistory.com/238)
1516 * -
5557 * *
2631 * -
9084 * -
17404 * *
2533 * *
15486 * *
2056 * -       -> 위상정렬 응용
1562 * *       -> DP + 비트마스크
1256 * *       -> DP + 이항계수
2240 * *       -> check
2169 * *
1509        -> 팰린드롬 응용


BJ_1937 -> 메모리 문제 고민

*dp 문제 해결순서
1. 문제해결 요구에 따라서 dp배열에 담길 컨셉 정하기
2. 초기 조건 구하기
3. 이전의 dp값과 기존의 배열 값을 조합하여 계속 dp값을 구해나가기

--------------------
GREEDY
--------------------
BJ_11047 -> 0 * * * * -
BJ_1931 -> 0 * * * * -
BJ_11399 -> 0 * * * * *      -> Counting Sort
BJ_1541 -> X * * * * *

BJ_10775 * *       -> 유니온 파인드

BJ_13305 * -
BJ_1946 * *
BJ_1715 * -
BJ_1339 * *         -> 단어 수학
BJ_1202 * *
BJ_1744 * *
BJ_11000 * *
BJ_2437 * *
BJ_1700 * *
BJ_2847 * -
BJ_3109 * *
BJ_2812 * *
BJ_2212 * *
BJ_12904 * *
BJ_11497 * *
BJ_1092 *
BJ_18310 *
BJ_13904 *
BJ_1461 *
BJ_2109 *
BJ_9576 *
BJ_8980 *
BJ_2138
BJ_13164
BJ_2457
BJ_7570
BJ_13975
BJ_16120
BJ_21758
BJ_1826
BJ_1083


--------------------
STACK
--------------------
BJ_10828 -> 0 * * -
BJ_10773 -> 0 * * -
BJ_9012 -> 0 * * -
BJ_4949 -> X * * * *
BJ_1874 -> O * * * *
BJ_17298 -> X * * * *

--------------------
QUEUE / DEQUE
--------------------
BJ_18258 -> 0 * * -
BJ_2164 -> 0 * * -
BJ_11866 -> X * * * *
BJ_1966 -> X * * * *
BJ_10866 - * * -
BJ_1021 - * * * *
BJ_5430 - * * * *

--------------------
DIVISION
--------------------
BJ_2630 -> 0 * * * *
BJ_1992 -> X * * * *
BJ_1780 -> 0 * * * *
BJ_1629 -> 0 * * * *    제곱 분할정복
BJ_11401 -> X * * * *   제곱 분할정복 + 페르마의 소정리
BJ_2740 -> O * * * *    행렬 곱셈
BJ_10830 -> 0 * * *     행렬 제곱 분할정복
BJ_11444 -> X * * ?
BJ_6549 -> X  * * * *   히스토그램 분할정복
BJ_2261 -> X ?

--------------------
BinarySearch
--------------------
BJ_1920 -> 0 * * * *     이분탐색
BJ_10816 -> 0 * * * *    lower_bound 와 upper_bound
BJ_1654 -> 0 * * * *
BJ_2805 -> 0 * * * *
BJ_2110 -> X * * * *
BJ_1300 -> 0 * * ?
BJ_12015 -> X * * ?

--------------------
PriorityQueue
--------------------
BJ_11279 -> X * * * -
BJ_1927 -> O * * -
BJ_11286 -> X * * * *
BJ_1655 -> X * * * *

--------------------
Dp2
--------------------
1. BJ_11066 -> O * * * * *
2. BJ_11049 -> X * * * * *   행렬 곱셈 순서
3. BJ_1520 -> X * * * * *
4. BJ_10942 -> X * * * * *   팰린드롬
5. BJ_2629 -> X * * * * *   냅색 응용
6. BJ_2293 -> X * * * * *     냅색 응용 (동전1)
7. BJ_7579 -> X * * * * *    냅색 응용 (중복 update 고려)

--------------------
DFS / BFS
--------------------
1. BJ_1260 -> X * * * -     그래프 생성 방식 (2차원 배열)
2. BJ_2606 -> X * * * -     그래프 생성 방식 (2차원 동적 배열)
3. BJ_2667 -> X * * * *
4. BJ_1012 -> O * * -
5. BJ_2178 -> X * * -
6. BJ 7576 -> X * * * -
7. BJ_7569 -> X * * * -
8. BJ_1697 -> X * * * *
9. BJ_2206 -> X * * * *
10.BJ_7562 -> O * * * *
11.BJ_1707 -> X * * * *    이분 그래프

--------------------
Shortest path
--------------------
1. BJ_1753 -> X * * * *     다익스트라 알고리즘
2. BJ_1504 -> X * * * *     다익스트라 + 필수 경로
3. BJ_9370 -> X * * * *     다익스트라 + 필수 경로 응용
4. BJ_11657 -> X * * * *    벨만포드 알고리즘
5. BJ_11404 -> X * * * *    플로이드와샬 알고리즘
6. BJ_10217 -> X * * * *    다익스트라 응용
7. BJ_1956 -> X * * * *     플로이드와샬 응용

--------------------
Two Pointer
--------------------
1. BJ_3273 -> X * * * *
2. BJ_2470 -> X * * * *
3. BJ_1806 -> X * * * *
4. BJ_1644 -> X * * * *
5. BJ_1450 -> X * * ?

--------------------
Dp3
--------------------
1. BJ_12852 -> X *
2. BJ_14002
3. BJ_14003
4. BJ_9252
5. BJ_2618
6. BJ_13913
7. BJ_9019
8. BJ_11779
9. BJ_11780

--------------------
Implementation
--------------------

16234
14890
2636
2573
17144
16235
17143
2638




