1.시간복잡도를 고려한 효율적인 알고리즘
2.공간복잡도를 고려한 효율적인 메모리 관리
3.운영을 위한 단순하고 가독성 높은 코드 작성
4.다른 개발자에게 안내하기 위한 충분한 주석
5.해당 문제 외에도 적용할 수 있는 범용성 있는 논리
6.코딩테스트에서도 활용할 수 있을 만큼 간결한 코드


어디든지 여러분의 소스코드를 보기좋게 올리세요 [color scripter]
https://colorscripter.com/info#e


접근하기
    문제를 공격적으로 받아들이고 필요한 정보를 추가적으로 요구하여, 해당 문제에 대해 완벽하게 이해하는게 우선이다.
    해당 문제를 익숙한 용어로 재정의하거나 문제를 해결하기 위한 정보를 추출한다. 이 과정을 추상화라고 한다.
    추상화된 데이터를 기반으로 이 문제를 어떻게 해결할 지 계획을 세운다. 이 때 사용할 알고리즘과 자료구조를 고민한다.
    세운 계획에 대해 검증을 해본다. 수도 코드 작성도 해당될 수 있고 문제 출제자에게 의견을 물어볼 수도 있다.
    세운 계획으로 문제를 해결해본다. 해결이 안 된다면 앞선 과정을 되짚어본다.

생각할 때
    비슷한 문제를 생각해본다.
    단순한 방법으로 시작하여 점진적으로 개선해나간다.
    작은 값을 생각해본다.
    그림으로 그려본다.
    수식으로 표현해본다.
    순서를 강제해본다.
    뒤에서부터 생각해본다